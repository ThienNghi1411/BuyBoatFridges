{
  "version": 3,
  "sources": ["../../app/scripts/product-card.js"],
  "sourcesContent": ["class ProductCard extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.init();\r\n        this.product = JSON.parse(this.querySelector(\".productCard_settings\").innerText).data;\r\n        this.preOrder = false;\r\n        if(this.querySelector('input[name=\"properties[preOrder]\"]')){\r\n            this.preOrder = true;\r\n        }\r\n    }\r\n    init(){\r\n        const addToCartForm = this.querySelector('.productCard__form');\r\n        addToCartForm.addEventListener(\"submit\" , (event)  => {\r\n            event.preventDefault();\r\n            this.addToCart() ;\r\n        })\r\n    }\r\n    getSectionInnerHTML(html) {\r\n        return new DOMParser()\r\n          .parseFromString(html, 'text/html');\r\n    }\r\n    getSectionsToRender() {\r\n        return [\r\n            {\r\n                section: 'cart-quickview',\r\n                selector: '.cartQuickView',\r\n            },\r\n            {\r\n                section: 'cart-icon-bubble',\r\n                selector: '.header__myCart-qty'\r\n            },\r\n            {\r\n                section: 'cart-popup',\r\n                selector: '.cartPopupCont'\r\n            }\r\n        ];\r\n    }\r\n    addToCart(){\r\n        let spinner = document.querySelector(\".spinnerAddToCart\");\r\n        spinner.style.display=\"block\";\r\n        let formData = {};\r\n        if (this.preOrder){\r\n            formData = {\r\n                'items': [{\r\n                    'id': this.product.variants[0].id,\r\n                    'quantity': 1,\r\n                    'properties': {\r\n                        'preOrder': 'true'\r\n                    }\r\n                 }],\r\n                'sections': this.getSectionsToRender().map((section) => section.section) \r\n            };\r\n        }else{\r\n            formData = {\r\n                'items': [{\r\n                    'id': this.product.variants[0].id,\r\n                    'quantity': 1\r\n                 }],\r\n                'sections': this.getSectionsToRender().map((section) => section.section) \r\n            };\r\n        }\r\n\r\n        fetch(window.Shopify.routes.root + 'cart/add.js', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(formData)\r\n        })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            if (data.status){\r\n                let popupError = document.querySelector(\".cartPopUpError\");\r\n                popupError.style.display=\"block\";\r\n                let errorText = popupError.querySelector(\".cartPopUpError__error\");\r\n                errorText.innerText=data.description;\r\n                let body = document.querySelector(\"body\");\r\n                body.style.overflow= \"hidden\";\r\n            }else{\r\n                this.getSectionsToRender().forEach((section => {\r\n                    if (section.selector === \".cartPopupCont\"){\r\n                        const parser = new DOMParser();\r\n                        let elementToAppend = document.querySelector(\".cartPopupCont\");\r\n                        let domToAdd = parser.parseFromString(data.sections[section.section],'text/html').querySelector(\".cartPopup\");\r\n                        domToAdd.setAttribute(\"data-qty\",1);\r\n                        domToAdd.setAttribute(\"data-price\",this.product.variants[0].price);\r\n                        domToAdd.setAttribute(\"data-img\",this.product.featured_image);\r\n                        elementToAppend.appendChild(domToAdd);\r\n                    }else{\r\n                        const elementToReplaces =\r\n                        document.querySelectorAll(section.selector);\r\n                        elementToReplaces.forEach(elementToReplace => {\r\n                            const domReplace = this.getSectionInnerHTML((data.sections[section.section]))\r\n                            elementToReplace.replaceWith(domReplace.querySelector(section.selector));\r\n                        })\r\n                       \r\n                    }\r\n                }));\r\n            }\r\n            spinner.style.display=\"none\";\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error:', error);\r\n        });\r\n    }\r\n}\r\ncustomElements.define('product-card', ProductCard);"],
  "mappings": "MAAA,mBAA0B,YAAY,CAClC,aAAc,CACV,QACA,KAAK,OACL,KAAK,QAAU,KAAK,MAAM,KAAK,cAAc,yBAAyB,WAAW,KACjF,KAAK,SAAW,GACb,KAAK,cAAc,uCAClB,MAAK,SAAW,IAGxB,MAAM,CAEF,AADsB,KAAK,cAAc,sBAC3B,iBAAiB,SAAW,AAAC,GAAW,CAClD,EAAM,iBACN,KAAK,cAGb,oBAAoB,EAAM,CACtB,MAAO,IAAI,aACR,gBAAgB,EAAM,aAE7B,qBAAsB,CAClB,MAAO,CACH,CACI,QAAS,iBACT,SAAU,kBAEd,CACI,QAAS,mBACT,SAAU,uBAEd,CACI,QAAS,aACT,SAAU,mBAItB,WAAW,CACP,GAAI,GAAU,SAAS,cAAc,qBACrC,EAAQ,MAAM,QAAQ,QACtB,GAAI,GAAW,GACf,AAAI,KAAK,SACL,EAAW,CACP,MAAS,CAAC,CACN,GAAM,KAAK,QAAQ,SAAS,GAAG,GAC/B,SAAY,EACZ,WAAc,CACV,SAAY,UAGpB,SAAY,KAAK,sBAAsB,IAAI,AAAC,GAAY,EAAQ,UAGpE,EAAW,CACP,MAAS,CAAC,CACN,GAAM,KAAK,QAAQ,SAAS,GAAG,GAC/B,SAAY,IAEhB,SAAY,KAAK,sBAAsB,IAAI,AAAC,GAAY,EAAQ,UAIxE,MAAM,OAAO,QAAQ,OAAO,KAAO,cAAe,CAC9C,OAAQ,OACR,QAAS,CACL,eAAgB,oBAEpB,KAAM,KAAK,UAAU,KAExB,KAAK,GACK,EAAS,QAEnB,KAAK,GAAQ,CACV,GAAI,EAAK,OAAO,CACZ,GAAI,GAAa,SAAS,cAAc,mBACxC,EAAW,MAAM,QAAQ,QACzB,GAAI,GAAY,EAAW,cAAc,0BACzC,EAAU,UAAU,EAAK,YACzB,GAAI,GAAO,SAAS,cAAc,QAClC,EAAK,MAAM,SAAU,aAErB,MAAK,sBAAsB,QAAS,GAAW,CAC3C,GAAI,EAAQ,WAAa,iBAAiB,CACtC,GAAM,GAAS,GAAI,WACf,EAAkB,SAAS,cAAc,kBACzC,EAAW,EAAO,gBAAgB,EAAK,SAAS,EAAQ,SAAS,aAAa,cAAc,cAChG,EAAS,aAAa,WAAW,GACjC,EAAS,aAAa,aAAa,KAAK,QAAQ,SAAS,GAAG,OAC5D,EAAS,aAAa,WAAW,KAAK,QAAQ,gBAC9C,EAAgB,YAAY,OAI5B,AADA,UAAS,iBAAiB,EAAQ,UAChB,QAAQ,GAAoB,CAC1C,GAAM,GAAa,KAAK,oBAAqB,EAAK,SAAS,EAAQ,UACnE,EAAiB,YAAY,EAAW,cAAc,EAAQ,eAM9E,EAAQ,MAAM,QAAQ,SAEzB,MAAM,AAAC,GAAU,CACd,QAAQ,MAAM,SAAU,OAIpC,eAAe,OAAO,eAAgB",
  "names": []
}
